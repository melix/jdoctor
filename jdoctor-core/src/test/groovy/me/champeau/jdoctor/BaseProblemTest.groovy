/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package me.champeau.jdoctor

import spock.lang.Specification
import spock.lang.Unroll

import java.util.function.Supplier

class BaseProblemTest extends Specification implements ProblemsVerifier {
    def "can describe a simple problem"() {
        given:
        def problem = new TestProblem(
                TestProblemId.problem1,
                TestSeverity.low,
                context("c"),
                { "a short description of the problem" },
                { "a long description of the problem giving more details" },
                { "this is why this problem happened" },
                { "https://some.url" },
                []
        )

        expect:
        with(problem) {
            id == TestProblemId.problem1
            severity == TestSeverity.low
            what == "a short description of the problem"
            why.get() == "this is why this problem happened"
            documentationLink.get() == "https://some.url"
        }
        descriptionOf(problem) {
            hasShort "a short description of the problem"
            hasLong "a long description of the problem giving more details"
        }
    }

    @Unroll
    def "some parameters are mandatory (#item)"() {
        when:
        new TestProblem(
                TestProblemId.problem1,
                TestSeverity.low,
                context,
                shortDesc,
                longDesc,
                reason,
                url,
                solutions
        )

        then:
        NullPointerException ex = thrown()
        ex.message == "$item must not be null"

        where:
        item                          | context        | shortDesc | longDesc | reason | url  | solutions
        "context"                     | null           | {}        | {}       | {}     | {}   | []
        "short description supplier"  | context("foo") | null      | {}       | {}     | {}   | []
        "long description supplier"   | context("foo") | {}        | null     | {}     | {}   | []
        "reason supplier"             | context("foo") | {}        | {}       | null   | {}   | []
        "documentation link supplier" | context("foo") | {}        | {}       | {}     | null | []
        "solutions"                   | context("foo") | {}        | {}       | {}     | {}   | null
    }

    def "can associate a solution to a problem"() {
        given:
        def problem = new TestProblem(
                TestProblemId.problem1,
                TestSeverity.low,
                context("c"),
                { "a short description of the problem" },
                { "a long description of the problem giving more details" },
                { "this is why this problem happened" },
                { "https://some.url" },
                [ { solution("hello") } as Supplier]
        )

        expect:
        descriptionOf(problem.possibleSolutions[0]) {
            hasShort "hello"
            doesNotHaveLong()
        }
    }

    def "can have a problem which ID is an int"() {
        given:
        def problem = new TestProblem2(
                404,
                TestSeverity.low,
                context("c"),
                { "page not found" },
                { "the page at the supplied URL doesn't exist" },
                { "This happened because you tried to open a page which doesn't exist on this server" },
                { "https://some.url" },
                [ { solution("check the URL") } as Supplier]
        )

        expect:
        descriptionOf(problem.possibleSolutions[0]) {
            hasShort "check the URL"
            doesNotHaveLong()
        }
    }
}
